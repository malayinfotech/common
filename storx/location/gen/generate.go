// Copyright (C) 2021 Storx Labs, Inc.
// See LICENSE for copying information

package main

import (
	"context"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"sort"
	"strconv"
	"strings"

	"github.com/zeebo/errs"

	"common/storx/location"
)

func main() {
	err := run()
	if err != nil {
		_ = os.Remove("country.go.work")
		log.Fatalf("%+v", err)
	}
	err = os.Rename("country.go.work", "country.go")
	if err != nil {
		log.Fatalf("%+v", err)
	}
}

func run() error {
	out, err := os.Create("country.go.work")
	if err != nil {
		return errs.Wrap(err)
	}
	defer func(out *os.File) {
		_ = out.Close()
	}(out)
	_, err = out.WriteString(`// Copyright (C) 2021 Storx Labs, Inc.
// See LICENSE for copying information
//

package location

// Code generated by ./gen/generate.go. DO NOT EDIT.
// original source: https://download.geonames.org/export/dump/countryInfo.txt
// license of the datasource: Creative Commons Attribution 4.0 License,
// https://creativecommons.org/licenses/by/4.0/

// country codes to two letter upper case ISO country code as uint16.
const (`)
	if err != nil {
		return errs.Wrap(err)
	}

	_, err = out.WriteString("\n")
	if err != nil {
		return errs.Wrap(err)
	}
	get, err := http.NewRequestWithContext(context.Background(), http.MethodGet, "https://download.geonames.org/export/dump/countryInfo.txt", nil)
	if err != nil {
		return errs.Wrap(err)
	}

	resp, err := http.DefaultClient.Do(get)
	if err != nil {
		return errs.Wrap(err)
	}

	body := resp.Body
	content, err := io.ReadAll(body)
	if err != nil {
		return errs.Wrap(err)
	}

	err = body.Close()
	if err != nil {
		return errs.Wrap(err)
	}

	countries := make(map[string]location.CountryCode)
	var countryNames []string

	maxCountryName := 0
	for _, line := range strings.Split(string(content), "\n") {
		if strings.HasPrefix(line, "#") {
			continue
		}
		fields := strings.Split(line, "\t")
		if len(fields) < 5 {
			continue
		}

		country := strings.ReplaceAll(fields[4], " ", "")
		country = strings.ReplaceAll(country, ",", "")
		country = strings.ReplaceAll(country, "-", "")
		country = strings.ReplaceAll(country, ".", "")

		countries[country] = location.ToCountryCode(fields[0])
		if len(country) > maxCountryName {
			maxCountryName = len(country)
		}
		countryNames = append(countryNames, country)
	}

	sort.Strings(countryNames)

	countries["None"] = location.CountryCode(0)
	countryNames = append([]string{"None"}, countryNames...)

	for _, country := range countryNames {
		_, err = out.WriteString(fmt.Sprintf("\t%-"+strconv.Itoa(maxCountryName)+"s = CountryCode(%d)\n", country, countries[country]))
		if err != nil {
			return errs.Wrap(err)
		}
	}
	_, err = out.WriteString("\n\n)\n")
	if err != nil {
		return errs.Wrap(err)
	}
	return nil
}
